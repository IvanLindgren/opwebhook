# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telebot
import webbrowser
import sqlite3
import re
import Backend
from flask import *
import json
import os
from telebot import types, callback_data
import time
import threading

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ID = 0
users_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

from bot import bot


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª .json
def save_users_data():
    with open('users_data.json', 'w') as f:
        json.dump(users_data, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ .json
def load_users_data():
    global users_data
    if os.path.exists('users_data.json'):
        with open('users_data.json', 'r') as f:
            users_data = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_users_data()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /hello
@bot.message_handler(commands=['start', 'hello '])
def main(message):
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    btn1 = types.InlineKeyboardButton(f'üëë –§–∏–ª—å—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data='filter', parse_mode='HTML')  # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    btn_stop = types.InlineKeyboardButton(f'üö´ –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='stop', parse_mode='HTML')

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.row(btn1)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    markup.row(btn_stop)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚ú® <b>OpenProject Bot</b>‚ú®, –∏ —è –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                     parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'begin'
@bot.callback_query_handler(func=lambda callback: callback.data == 'begin')
def begin(callback):
    if callback.data == 'begin':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': 'all'
        }
        with open("users_data.json", "w") as f:
            json.dump(users_data, f)
        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å <b>–≤—Å–µ</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                         parse_mode='HTML')
        main(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'filter'
@bot.callback_query_handler(func=lambda callback: callback.data == 'filter')
def filter(callback):
    if callback.data == 'filter':
        bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        markup = types.InlineKeyboardMarkup()
        btn3 = types.InlineKeyboardButton(f'üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='all', parse_mode='HTML')
        btn4 = types.InlineKeyboardButton(f'üóÇ –ü–æ —Ç–∏–ø—É', callback_data='type', parse_mode='HTML')
        btn5 = types.InlineKeyboardButton(f'üîë –ü–æ id', callback_data='id', parse_mode='HTML')
        btn6 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='back', parse_mode='HTML')

        markup.row(btn3)
        markup.row(btn4, btn5)
        markup.row(btn6)
        bot.send_message(callback.message.chat.id,
                         f'üì£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
                         parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'stop'
@bot.callback_query_handler(func=lambda callback: callback.data == 'stop')
def stop(callback):
    markup = types.InlineKeyboardMarkup()
    btn_begin = types.InlineKeyboardButton(f'‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='begin', parse_mode='HTML')
    markup.row(btn_begin)

    bot.send_message(callback.message.chat.id,
                     f'–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                     parse_mode='HTML', reply_markup=markup)

    chat_id = callback.message.chat.id
    users_data[callback.from_user.id] = {
        'chat_id': chat_id,
        'type_of_notification': callback.data
    }
    with open("users_data.json", "w") as f:
        json.dump(users_data, f)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'all'
@bot.callback_query_handler(func=lambda callback: callback.data == 'all')
def all(callback):
    if callback.data == 'all':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': callback.data
        }
        with open("users_data.json", "w") as f:
            json.dump(users_data, f)
        markup = types.InlineKeyboardMarkup()
        btn7 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='filter', parse_mode='HTML')

        markup.row(btn7)
        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å <b>–≤—Å–µ</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                         parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(callback.id, text='–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'type'
@bot.callback_query_handler(func=lambda callback: callback.data == 'type')
def type(callback):
    if callback.data == 'type':
        markup = types.InlineKeyboardMarkup()

        btn_type1 = types.InlineKeyboardButton(f'üî∏ Task', callback_data='task', parse_mode='HTML')
        btn_type2 = types.InlineKeyboardButton(f'üîπ Milestone', callback_data='milestone', parse_mode='HTML')
        btn_type3 = types.InlineKeyboardButton(f'üî∏ Phase', callback_data='phase', parse_mode='HTML')
        btn8 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='filter', parse_mode='HTML')

        markup.row(btn_type1)
        markup.row(btn_type2)
        markup.row(btn_type3)
        markup.row(btn8)
        bot.send_message(callback.message.chat.id,
                         f'üóû –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:',
                         parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'task'
@bot.callback_query_handler(func=lambda callback: callback.data == 'task')
def task(callback):
    if callback.data == 'task':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': 'task'
        }
        with open("users_data.json", "w") as f:
            json.dump(users_data, f)
        markup = types.InlineKeyboardMarkup()
        btn11 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='type', parse_mode='HTML')
        markup.row(btn11)

        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ "Task"',
                         parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(callback.id, text='–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ <b>"Task"</b>')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'milestone'
@bot.callback_query_handler(func=lambda callback: callback.data == 'milestone')
def milestone(callback):
    if callback.data == 'milestone':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': callback.data
        }
        with open("users_data.json", "w") as f:
            json.dump(users_data, f)
        markup = types.InlineKeyboardMarkup()
        btn12 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='type', parse_mode='HTML')
        markup.row(btn12)

        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ "Milestone"',
                         parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(callback.id, text='–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ <b>"Milestone"</b>')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'phase'
@bot.callback_query_handler(func=lambda callback: callback.data == 'phase')
def phase(callback):
    if callback.data == 'phase':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': callback.data
        }
        with open("users_data.json", "w") as f:
            json.dump(users_data, f)
        markup = types.InlineKeyboardMarkup()
        btn13 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='type', parse_mode='HTML')
        markup.row(btn13)

        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ "Phase"',
                         parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(callback.id, text='–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ <b>"Phase"</b>')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'id'
@bot.callback_query_handler(func=lambda callback: callback.data == 'id')
def id(callback):
    if callback.data == 'id':
        markup = types.InlineKeyboardMarkup()
        btn9 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='filter', parse_mode='HTML')
        markup.row(btn9)

        msg = bot.send_message(callback.message.chat.id,
                             f'üìå –í–≤–µ–¥–∏—Ç–µ id —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:',
                             parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(callback.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        bot.register_next_step_handler(msg, handle_input)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ ID
def get_ID(callback):
    global ID
    ID = int(callback.text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'input'
@bot.callback_query_handler(func=lambda callback: callback.data == 'input')
def handle_input(message):
    if message.text.isdigit():
        get_ID(message)
        notification = Backend.get_notification_by_id(ID)

        if notification:
            markup = types.InlineKeyboardMarkup()
            btn_b = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='filter', parse_mode='HTML')
            markup.row(btn_b)
            message_text = f'id: {notification.id} event_type: {notification.event_type} data: {json.loads(notification.data)} created_at: {notification.created_at}'
            bot.send_message(message.from_user.id, message_text, parse_mode='HTML')

        else:
            markup = types.InlineKeyboardMarkup()
            btn_b = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='filter', parse_mode='HTML')
            markup.row(btn_b)

            bot.send_message(message.from_user.id, "‚ùóÔ∏è –¢–∞–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode='HTML', reply_markup=markup)
            bot.register_next_step_handler(message, handle_input)

    else:
        markup = types.InlineKeyboardMarkup()
        btn_b = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='filter', parse_mode='HTML')
        markup.row(btn_b)

        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=markup)
        bot.register_next_step_handler(message, handle_input)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'back'
@bot.callback_query_handler(func=lambda callback: callback.data == 'back')
def back(callback):
    if callback.data == 'back':
        main(callback.message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def periodic_check():
    while True:
        for user_id, data in users_data.items():
            if data['type_of_notification'] == 'task':
                noti_arr = Backend.get_notifications_by_type(data['type_of_notification'])
                for n in noti_arr:
                    message_text = f'id: {n.id} event_type: {n.event_type} data: {json.loads(n.data)} created_at: {n.created_at}'
                    bot.send_message(data['chat_id'], message_text, parse_mode='HTML')

            elif data['type_of_notification'] == 'milestone':
                noti_arr = Backend.get_notifications_by_type(data['type_of_notification'])
                for n in noti_arr:
                    message_text = f'id: {n.id} event_type: {n.event_type} data: {json.loads(n.data)} created_at: {n.created_at}'
                    bot.send_message(data['chat_id'], message_text, parse_mode='HTML')

            elif data['type_of_notification'] == 'phase':
                noti_arr = Backend.get_notifications_by_type(data['type_of_notification'])
                for n in noti_arr:
                    message_text = f'id: {n.id} event_type: {n.event_type} data: {json.loads(n.data)} created_at: {n.created_at}'
                    bot.send_message(data['chat_id'], message_text, parse_mode='HTML')

            elif data['type_of_notification'] == 'all':
                noti_arr = Backend.get_notifications_by_type(data['type_of_notification'])
                for n in noti_arr:
                    message_text = f'id: {n.id} event_type: {n.event_type} data: {json.loads(n.data)} created_at: {n.created_at}'
                    bot.send_message(data['chat_id'], message_text, parse_mode='HTML')
            else:
                pass
        time.sleep(60)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    thread = threading.Thread(target=periodic_check)
    thread.daemon = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –¥–µ–º–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ (–∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã)
    thread.start()

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
bot.infinity_polling(none_stop=True)
