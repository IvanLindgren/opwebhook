# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telebot
import Backend
from flask import Flask, request, jsonify
from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import json
import os
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è Render
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./notifications.db")
engine = create_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class Notification(Base):
    __tablename__ = "notifications"
    id = Column(Integer, primary_key=True, index=True)
    event_type = Column(String, index=True)
    data = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Base.metadata.create_all(bind=engine)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_notification(event_type, data):
    session = SessionLocal()
    notification = Notification(event_type=event_type, data=json.dumps(data))
    session.add(notification)
    session.commit()
    session.close()

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
@app.route("/webhook", methods=["POST"])
def webhook_listener():
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        event_type = data.get("action", "unknown_event")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        save_notification(event_type, data)

        return jsonify({"status": "success", "message": "Notification saved"}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"), skip_pending=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
users_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª .json
def save_users_data():
    with open('users_data.json', 'w') as f:
        json.dump(users_data, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ .json
def load_users_data():
    global users_data
    if os.path.exists('users_data.json'):
        with open('users_data.json', 'r') as f:
            users_data = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_users_data()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /hello
@bot.message_handler(commands=['start', 'hello'])
def main(message):
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = telebot.types.InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    btn1 = telebot.types.InlineKeyboardButton(f'üëë –§–∏–ª—å—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data='filter')
    btn_stop = telebot.types.InlineKeyboardButton(f'üö´ –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='stop')

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.row(btn1)
    markup.row(btn_stop)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚ú® <b>OpenProject Bot</b>‚ú®, –∏ —è –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                     parse_mode='HTML', reply_markup=markup)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_notification(user_chat_id, message):
    await bot.send_message(user_chat_id, message, parse_mode='HTML')

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def process_notifications():
    while True:
        for user_id, data in users_data.items():
            notifications = Backend.get_notifications_by_type(data['type_of_notification'])
            for notification in notifications:
                message_text = f"id: {notification['id']} event_type: {notification['event_type']} data: {notification['data']} created_at: {notification['created_at']}"
                await send_notification(data['chat_id'], message_text)

        await asyncio.sleep(10)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'begin'
@bot.callback_query_handler(func=lambda callback: callback.data == 'begin')
def begin(callback):
    if callback.data == 'begin':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': 'all'
        }
        save_users_data()
        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å <b>–≤—Å–µ</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                         parse_mode='HTML')
        main(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'filter'
@bot.callback_query_handler(func=lambda callback: callback.data == 'filter')
def filter(callback):
    if callback.data == 'filter':
        bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        markup = telebot.types.InlineKeyboardMarkup()
        btn3 = telebot.types.InlineKeyboardButton(f'üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='all')
        btn4 = telebot.types.InlineKeyboardButton(f'üóÇ –ü–æ —Ç–∏–ø—É', callback_data='type')
        btn5 = telebot.types.InlineKeyboardButton(f'üîë –ü–æ id', callback_data='id')
        btn6 = telebot.types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='back')

        markup.row(btn3)
        markup.row(btn4, btn5)
        markup.row(btn6)
        bot.send_message(callback.message.chat.id,
                         f'üì£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
                         parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'stop'
@bot.callback_query_handler(func=lambda callback: callback.data == 'stop')
def stop(callback):
    markup = telebot.types.InlineKeyboardMarkup()
    btn_begin = telebot.types.InlineKeyboardButton(f'‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='begin')
    markup.row(btn_begin)

    bot.send_message(callback.message.chat.id,
                     f'–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                     parse_mode='HTML', reply_markup=markup)

    chat_id = callback.message.chat.id
    users_data[callback.from_user.id] = {
        'chat_id': chat_id,
        'type_of_notification': callback.data
    }
    save_users_data()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'all'
@bot.callback_query_handler(func=lambda callback: callback.data == 'all')
def all(callback):
    if callback.data == 'all':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': callback.data
        }
        save_users_data()
        markup = telebot.types.InlineKeyboardMarkup()
        btn7 = telebot.types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='filter')

        markup.row(btn7)
        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å <b>–≤—Å–µ</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                         parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(callback.id, text='–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    loop = asyncio.get_event_loop()
    loop.create_task(process_notifications())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.polling(none_stop=True)

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
