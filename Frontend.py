# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telebot
import webbrowser
import sqlite3
import re
import Backend
from flask import *
import json
import os
from telebot import types, callback_data
import time
import threading

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ID = 0
users_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7754833119:AAEIUSMefzMu2fR88kptn4MxD2N7h4vY57c', skip_pending=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /hello
@bot.message_handler(commands=[])
def settings(message):
    markup = types.InlineKeyboardMarkup()
    btn_stop = types.InlineKeyboardButton(f'üö´ –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='stop', parse_mode='HTML')
    btn_not = types.InlineKeyboardButton(f'‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='all', parse_mode='HTML')

    markup.row(btn_not)
    markup.row(btn_stop)

    bot.send_message(message.chat.id,
                     f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                     parse_mode='HTML', reply_markup=markup)

@bot.message_handler(commands=['start', 'hello '])
def main(message):

    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚ú® <b>OpenProject Bot</b>‚ú®, –∏ —è –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                     parse_mode='HTML')
    settings(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'all'
@bot.callback_query_handler(func=lambda callback: callback.data == 'all')
def all(callback):
    if callback.data == 'all':
        chat_id = callback.message.chat.id
        users_data[callback.from_user.id] = {
            'chat_id': chat_id,
            'type_of_notification': callback.data
        }
        markup = types.InlineKeyboardMarkup()
        btn7 = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='back', parse_mode='HTML')

        markup.row(btn7)
        bot.send_message(callback.message.chat.id,
                         f'‚òëÔ∏è –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å <b>–≤—Å–µ</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                         parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(callback.id, text='–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'stop'
@bot.callback_query_handler(func=lambda callback: callback.data == 'stop')
def stop(callback):

    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton(f'üîô –ù–∞–∑–∞–¥', callback_data='back', parse_mode='HTML')
    markup.row(btn_back)

    bot.send_message(callback.message.chat.id,
                     f'–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
                     parse_mode='HTML', reply_markup=markup)
    bot.answer_callback_query(callback.id, text='–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')
    bot.delete_message(callback.message.chat.id, callback.message.message_id)

    chat_id = callback.message.chat.id
    users_data[callback.from_user.id] = {
        'chat_id': chat_id,
        'type_of_notification': callback.data
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'back'
@bot.callback_query_handler(func=lambda callback: callback.data == 'back')
def back(callback):
    if callback.data == 'back':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        settings(callback.message)

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
bot.infinity_polling(none_stop=True)