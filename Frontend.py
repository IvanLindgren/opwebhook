# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telebot
import os
import json
from telebot import types
from bot import bot
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ID = 0
users_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º users.json
def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ users.json"""
    global users_data
    if os.path.exists('users.json'):
        with open('users.json', 'r') as f:
            users_data = json.load(f)
            print(json.load(f))
    else:
        users_data = {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª users.json"""
    with open('users.json', 'w') as f:
        json.dump(users_data, f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_users_data()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /hello
@bot.message_handler(commands=['start', 'hello'])
def main(message):
    bot.send_message(
        message.chat.id,
        f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚ú® <b>OpenProject Bot</b>‚ú®, –∏ —è –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
        parse_mode='HTML'
    )
    settings(message)

def settings(message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    markup = types.InlineKeyboardMarkup()
    btn_stop = types.InlineKeyboardButton('üö´ –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='stop')
    btn_not = types.InlineKeyboardButton('‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='all')
    markup.row(btn_not)
    markup.row(btn_stop)
    bot.send_message(message.chat.id, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'all' (–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
@bot.callback_query_handler(func=lambda callback: callback.data == 'all')
def all(callback):
    chat_id = callback.message.chat.id
    users_data[callback.from_user.id] = {
        'chat_id': chat_id,
        'type_of_notification': callback.data
    }
    save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ

    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')
    markup.row(btn_back)
    bot.send_message(
        callback.message.chat.id,
        '‚òëÔ∏è –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å <b>–≤—Å–µ</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
        parse_mode='HTML',
        reply_markup=markup
    )
    bot.answer_callback_query(callback.id, text='–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')
    bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'stop' (–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
@bot.callback_query_handler(func=lambda callback: callback.data == 'stop')
def stop(callback):
    chat_id = callback.message.chat.id
    if callback.from_user.id in users_data:
        del users_data[callback.from_user.id]  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ
        save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª

    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')
    markup.row(btn_back)
    bot.send_message(
        callback.message.chat.id,
        '–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
        parse_mode='HTML',
        reply_markup=markup
    )
    bot.answer_callback_query(callback.id, text='–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')
    bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback 'back'
@bot.callback_query_handler(func=lambda callback: callback.data == 'back')
def back(callback):
    bot.delete_message(callback.message.chat.id, callback.message.message_id)
    settings(callback.message)

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
bot.infinity_polling(none_stop=True)
